#!/bin/bash
clear
apt-get install lolcat -y &>/dev/null
apt-get install figlet -y &>/dev/null
apt-get install curl -y &>/dev/null
apt install git -y &>/dev/null 
apt install figlet boxes -y &>/dev/null
cd $HOME
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mvocê precisa executar como root\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 0
}
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')
# Função para executar comandos com barra de progresso
# Variáveis de cores para o terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'
executar_comando() {
    local comando="$1"
    local mensagem="$2"
    local delay=0.1
    local percent=0
    local bar=""

    echo -e "${YELLOW}${mensagem:0:50}${NC}"
    echo -n ' '
    
    eval "$comando" & local cmd_pid=$!
    
    while kill -0 $cmd_pid 2>/dev/null; do
        percent=$((percent + 1))
        if [ $percent -ge 100 ]; then
            percent=100
        fi
        echo -ne "       \r$percent% [${bar:0:$((percent / 5))}]"
        sleep $delay
        bar=$(printf "%-30s" | tr ' ' '#')
    done

    wait $cmd_pid
    if [ $? -eq 0 ]; then
        percent=100
        echo -ne "       \r$percent% [${bar:0:20}]\n"
    else
        echo -e "\r${RED}Erro ao executar o comando.${NC}"
    fi
    
    echo
    sleep 1
}
cd $HOME
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y >/dev/null 2>&1
        ${comando[1]} -y >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;32m█"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;32m|"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}
function verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1' | rev)
    chmod +x $_Ink/list >/dev/null 2>&1
    [[ ! -e "$_Ink/list" ]] && {
        echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
        rm -rf $HOME/Plus >/dev/null 2>&1
        sleep 2
        clear
        exit 1
    }
}

otimize_python() {
    # INSTALA PYTHON AO PYTHON2
    apt-get install python -y >/dev/null 2>&1
    apt-get install python2 -y >/dev/null 2>&1
    # INSTALA PYTHON3.6 AO PYTHON3.9
    apt-get install python3.6 -y >/dev/null 2>&1
    apt-get install python3.7 -y >/dev/null 2>&1
    apt-get install python3.8 -y >/dev/null 2>&1
    apt-get install python3.9 -y >/dev/null 2>&1
	sudo add-apt-repository ppa:deadsnakes/ppa >/dev/null 2>&1
	apt-get install python3.10 -y >/dev/null 2>&1
    # CRIA ALTERNATIVAS PYTHON
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
	update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
	update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 5 >/dev/null 2>&1
    # INSTALA PIP
    apt install pip -y
    apt install python3-pip -y
    # INSTALA SOCAT
    apt install socat -y
    #SETAR PYTHON3
    update-alternatives --set python3 /usr/bin/python3.8
	echo '#DNS=8.8.8.8' >>/etc/systemd/resolved.conf
	echo '#FallbackDNS=8.8.4.4' >>/etc/systemd/resolved.conf
	service systemd-resolved restart >/dev/null 2>&1
	apt-get autoremove speedtest-cli -y && curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash && mkdir -p /etc/apt/keyrings && chmod 755 /etc/apt/keyrings && curl -fsSL https://packagecloud.io/ookla/speedtest-cli/gpgkey | gpg --dearmor > /etc/apt/keyrings/ookla_speedtest-cli-archive-keyring.gpg && apt-get update -y && apt-get upgrade -y && apt-get install speedtest -y >/dev/null 2>&1
    echo 'net.ipv6.conf.all.disable_ipv6 = 0' >>/etc/sysctl.conf
	echo 'net.ipv6.conf.default.disable_ipv6 = 0' >>/etc/sysctl.conf
	echo 'net.ipv6.conf.lo.disable_ipv6 = 0' >>/etc/sysctl.conf
}
clear
[[ -f "$HOME/usuarios.db" ]] && {
        clear
        echo -e "\033[0;36m╔═══════════════════════════•⊱✦⊰•═══════════════════════════╗\033[0m"
        echo -e "\033[1;37m     DADOS DE CLIENTES ENCONTRADO!"
		echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
        echo -e "\033[0;31m   [\033[1;36m01\033[0;31m] \033[1;37m• \033[1;37mMANTER DADOS ATUAIS\033[0m"
        echo -e "\033[0;31m   [\033[1;36m02\033[0;31m] \033[1;37m• \033[1;37mCRIAR UMA NOVA BASE DE DADOS\033[0m"
        echo -e "\033[0;36m╚═══════════════════════════•⊱✦⊰•═══════════════════════════╝\033[0m"
        tput setaf 2
        tput bold
        awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' >$HOME/usuarios.db
        tput sgr0
    }
fun_attlist() {
        apt-get update -y
        [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
        echo "crz: $(date)" >/usr/share/.plus/.plus
    }
inst_pct() {
        _pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip" "python" "at")
        for _prog in ${_pacotes[@]}; do
            apt install $_prog -y
        done
	[[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp
    ufw allow 80/tcp
    ufw allow 3128/tcp
    ufw allow 8799/tcp
    ufw allow 8080/tcp
	ufw allow 6969/tcp
    }
clear
figlet "SSH-PRO" | lolcat
echo ""
#-----------------------------------------------------------------------------------------------------------------
echo -e "\n\033[1;36mVERIFICANDO... \033[0m" ; rm $_Ink/list > /dev/null 2>&1; wget -P $_Ink https://raw.githubusercontent.com/vmell0/pro/main/Install/list >/dev/null 2>&1
    verif_key
    sleep 3s
    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
    rm versao* >/dev/null 2>&1
    wget https://raw.githubusercontent.com/vmell0/pro/main/Install/versao >/dev/null 2>&1
    rm v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/vmell0/pro/main/Modulos/v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/vmell0/pro/main/Modulos/botteste.sh >/dev/null 2>&1
    chmod 777 v2raymanager >/dev/null 2>&1
    chmod 777 botteste.sh >/dev/null 2>&1
    mkdir $HOME/BOT >/dev/null 2>&1
    cd $HOME/BOT
    wget https://raw.githubusercontent.com/vmell0/pro/main/Modulos/ShellBot.sh >/dev/null 2>&1
    chmod 777 ShellBot.sh >/dev/null 2>&1
    cd >/dev/null 2>&1
    chmod 777 licence >/dev/null 2>&1
    mkdir /etc/rec >/dev/null 2>&1
    cd /etc/rec
    wget https://raw.githubusercontent.com/vmell0/pro/main/Modulos/licence >/dev/null 2>&1
    chmod 777 licence >/dev/null 2>&1
    cd >/dev/null 2>&1
    #-----------------------------------------------------------------------------------------------------------------
    echo ""
    executar_comando "fun_attlist &> /dev/null" "ATUALIZANDO SISTEMA"
    echo ""
    executar_comando "inst_pct &> /dev/null" "INSTALANDO PACOTES"
    echo ""
    executar_comando "otimize_python &> /dev/null" "OTIMIZANDO PYTHON"
    echo ""
    executar_comando "$_Ink/list $_lnk $_Ink $_1nk $key &> /dev/null" "CONCLUINDO FUNÇÕES E DEFINIÇÕES (AGUARDE)"
    echo ""
    cd $HOME
    echo -e "        \033[1;33m • \033[1;32mINSTALACAO CONCLUIDA\033[1;33m • \033[0m"
	echo "clear" >> /root/.bashrc
	echo 'echo -e ""' >>/root/.bashrc
	echo 'echo -e "\033[1;32m DIGITE : \033[1;31mmenu\033[1;37m"' >>/root/.bashrc
	echo 'echo -e ""' >>/root/.bashrc
	clear
    cd $HOME
    figlet "SSH-PRO" | lolcat
    echo -e "\033[01;31m\033[1;31m\033[5;34;47m                INSTALACAO CONCLUIDA               \033[1;33m \033[0m\033[01;31m"
	echo -e "\033[01;31m\033[1;33mPARA INICIAR DIGITE: \033[1;32mmenu\033[0m"
    rm $HOME/Plus && cat /dev/null > ~/.bash_history && history -c
